# -*- coding: utf-8 -*-
"""Polishcompanies_Bankruptcy_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SZ3XlkrIM85H3gHjGBmU2zshdw2xDPEK

## **Detecting whether or not a bank goes bankrupt  after 1 year**

**Importing necessary libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

""" **Importing bankruptcy dataset**"""

from scipy.io import arff
from io import BytesIO
data = arff.loadarff('/content/sample_data/5year.arff')
df = pd.DataFrame(data[0])
X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].values
y=[]
for i in range(len(Y)):
  if(Y[i]==b'0'):
    y.append(0)
  else:
    y.append(1)

""" **Processing missing values**"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X)
X = imputer.transform(X)



"""**Splitting dataset into training and test sets**"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""# **Logistic regression**

**Training the logistic regression model**
"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, Y_train)

"""**Predicting the target labels of testset** """

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
from sklearn.metrics import plot_confusion_matrix
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))
#https://vitalflux.com/accuracy-precision-recall-f1-score-python-example/

"""**Eliminating attributes based on correlation**

"""

print(len(X[0]))
l=[]
for i in range(0,len(X[0])):
  xmat=X[:,i]
  ymat=np.array(y)
  r = np.corrcoef(xmat, ymat)
  if(r[0,1]>0):
    l.append(i)
X=np.delete(X, l, axis=1)
print(len(X[0]))

"""**Training the logistic regression model after reducing X**"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, Y_train)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))

"""# **Feacture extraction**"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
lda = LDA(n_components = 1)
print(len(X_train[0]))
X_train = lda.fit_transform(X_train, Y_train)
X_test = lda.transform(X_test)
print(len(X_train[0]))

"""**Training the logistic regression model after feature extraction**"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, Y_train)

"""Predicting the target lables of testset"""

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))

"""# **Linear Support Vector Machine**"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, Y_train)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))

"""# **Polynomial Support Vector Machine**"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'poly',degree=3, random_state = 0)
classifier.fit(X_train, Y_train)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))

"""# **Radial basis function SVM**"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(X_train, Y_train)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))

"""# **K-NN model**"""

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, Y_train)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score, f1_score
Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
plot_confusion_matrix(classifier, X_test, Y_test)  
plt.show()
print("accuracy = %f" % accuracy_score(Y_test, Y_pred))
print("precision = %f" % precision_score(Y_test, Y_pred))
print("recall score = %f" % recall_score(Y_test, Y_pred))
print("f1 score = %f" % f1_score(Y_test, Y_pred))